syntax = "proto3";

message AIOSPacket {
    string session_id = 1;      
    uint64 seq_no = 2;           // Sequence number
    string data = 4;              // Data
    double ts = 5;               // Timestamp  
    string output_ptr = 6;       // JSON serialized string for output pointer
    repeated FileInfo files = 7; // Array of file structures
}

message FileInfo {
    string metadata = 1; // JSON serialized metadata
    bytes file_data = 2; // File data
}

// Define the message structure
message BlockInferencePacket {
    string block_id = 1;         // block_id is optional, the ID of the block (if you are doing a single block inference)
    string session_id = 3;       // Session identifier - a unique session_id for each block - useful for stateful inference
    uint64 seq_no = 4;           // Sequence number - the unique sequence number if you are doing sequence / stateful inference
    bytes frame_ptr = 5;         // Frame pointer (optional - refer to the docs below for explanation)
    string data = 6;              // Data (input data - optional)
    string query_parameters = 7;  // Parameters to use for search (optional if block_id is not specified)
    double ts = 8;               // Timestamp in unix epoch format (optional)
    repeated FileInfo files = 9; // Array of file structures - each follows FileInfo field
    string output_ptr = 10; // The graph structure (optional - refer the graph structure explanation below)
}

// the inference service
service BlockInferenceService {
    rpc infer(BlockInferencePacket) returns (AIOSPacket);
}
